HASH BATTLE




Disclaimer:
I have only run this on Google Chrome so to use the site how it was intended, please use Chrome.




Requirements/Installation:
To run this locally, you first need to set up a virtual environment:

$ virtualenv venv
$ . venv/bin/activate

Then you need to install all the requirements needed for this project:

$ pip install -r requirements.txt

This command installs most things, but you will also need to download rabbitmq.
After you have installed it, make sure that rabbitmq is running by running this:

$ sudo rabbitmqctl status

To start the server, in the app directory run:

$ python manage.py runserver

Before you can start battling hashtags, you need to start celery (in a separate terminal window):

$ celery -A app worker -l info

Now you can go to localhost:<port> and the app will authenticate you with your twitter account and you can start battling out hashes.




Navigating:

After you are authenticated on the home page, you will be taken to localhost:<port>/home. Here you can enter up to 4 hashes and submit the form. You will be shown a modal where you can go back to make any changes or continue on to the battle. Once you get to the page, you may not see any tweets displayed yet but they will start coming in quickly depending on the popularity of the hashtags you chose. You can click either the right or the left controllers of the carousel to see the updating graph of total tweets. The graph is redrawn every time there is a new tweet which is about every 5 seconds. There is also a menu at the top right hand side of the graph which you can use to export the graph in a variety of formats. This is provided by the Highcharts exporting.js library. Whenever you feel that you are done with the battle, you can click the End Battle button at the bottom of the page. You will be shown a modal with the results and the winner. At this point, you can either choose to go back to continue on with the battle, or you can click Done to go back to the homepage with the form. Ending the battle terminates the celery workers so if you decide to start another battle, make sure you start celery again with the same command as before.




Stopping the Celery workers:

You can either click the End Battle button in the battle view or if something goes wrong, you can hit Ctrl^C twice in the celery terminal window.
This will shutdown all the workers so if you want to run the app again, you should run this again:

$ celery -A app worker -l info
